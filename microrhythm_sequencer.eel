desc:Microrhythm MIDI Sequencer
//tags: MIDI generator sequencing microrhythm

slider1:60<0,127,1>Note Start

// Enable MIDI-only optimizations
in_pin:none
out_pin:none

@init

// Shorthand constants
note_on = $x90;
note_off = $x80; // Not completely sure about this one

// Runtime variables
list_length = 32; // Number of steps in sequencer
num_notes = 16; // Number of channels in sequencer
last_beat_pos = -1;
npatterns = 16;
mstate = -1;
lastpreviewsel = -1;
gfx_clear = -1;
ext_noinit = 1;
noteonstate = 0;
want_preview = -1;
want_preview_off = 0;



@slider
basenote = slider1 | 0;

notelist = list_length;

@serialize
file_mem(0, 0, list_length * npatterns);

@block

(want_preview_off && last_preview >= 0) ? (
  midisend(0, note_off, last_preview + basenote);
  last_preview = -1;
);
want_preview_off = 0;


(want_preview >= 0) ? (
  midisend(0, note_on, want_preview + basenote + 127 * 256);
  last_preview=want_preview;
  want_preview=-1;
);

curbeatpos = beat_position;
cursplpos=0;
dbeatpos = (tempo * 4.0 / (60.0 * ts_denom * srate));


loop( ((play_state & 1) ? samplesblock : 1), // Loop count

  beatpos = (play_state & 1)
    ? (curbeatpos * 4.0) % list_length
    : -100;
  
  ((beatpos != last_beat_pos) || !(play_state & 1)) ? (
    a = (play_state & 1)
      ? notelist[beatpos]
      : 0;
    npos = basenote;
    noneed = noteonstate;
    noteonstate=0;
    while( // do while
    
      (noneed & 1) ? (
         midisend(cursplpos, note_off, npos);
      );
      
      (a & 1) ? (
        midisend(cursplpos, note_on, npos + 127 * 256);
        noteonstate += 2 ^ (npos - basenote);
      );
      
      npos += 1;
      noneed *= 0.5;
      
      ((a *= 0.5) >= 1 || noneed >= 1); // do while condition
    );
    last_beat_pos = beatpos;
  );
  cursplpos += 1;
  curbeatpos += dbeatpos;
);

@sample

@gfx 400 300

((lgfx_w != gfx_w) || (lgfx_h != gfx_h)) ? (
  lgfx_w = gfx_w; lgfx_h = gfx_h;
  gfx_r = gfx_g = gfx_b = gfx_x = gfx_y = 0;
  gfx_rectto(gfx_w, gfx_h);
);

y = num_notes - 1 - (((mouse_y / gfx_h) * num_notes ) | 0);

(mouse_cap&2) ? (
  ((y != lastpreviewsel)
    && (y >= 0)
    && (y < num_notes)) ?
  (
    (lastpreviewsel >= 0) ? (
      want_preview_off = 1;
    );
    want_preview = lastpreviewsel = y;
  );
):(
  want_preview_off=1;
  lastpreviewsel=-1;
);

(mouse_cap&1) ? (
    x = ((mouse_x/gfx_w)*list_length)|0;
    x >= 0 && x < list_length && y >= 0 && y < num_notes? (
      mstate<0 ? (
        mask = 2^y;
        nlm=(notelist[x] & mask);
        mstate=nlm?0:1;
        mstate==0 && nlm ? notelist[x]-=mask;
        mstate==1 && !nlm ? notelist[x]+=mask;
      ) : (
        lcnt = max(abs(last_x-x),abs(last_y-y))|0;
        dx = (x-last_x)/lcnt;
        dy = (y-last_y)/lcnt;
        lcnt >= 1 ? loop(lcnt,
           last_x += dx;
           last_y += dy;
           mask = 2^(last_y|0);
           nlm=(notelist[last_x|0] & mask);
           mstate==0 && nlm ? notelist[last_x|0]-=mask;
           mstate==1 && !nlm ? notelist[last_x|0]+=mask;

        );
      );
      last_x = x;
      last_y = y;
    );
) : (
  mstate >= 0 ? sliderchange(-1);
  mstate=-1;
);


ly=0;

notepos=0;
loop(num_notes,

ty=((notepos+1)*gfx_h)/(num_notes);
lx=0;
xpos=0;
mask = 2^(num_notes-1-notepos);
cidx=(slider1&7);
gfx_a=1;

use_r=(cidx&1) ? 0.6 : 0.2;
use_g=(cidx&2) ? 0.6 : 0.2;
use_b=(cidx&4) ? 0.2 : 0.6;
cidx==3  ? use_r*=2;
cidx==4 ? use_g*=2;

loop(list_length,
  tx = ((xpos+1)*gfx_w)/list_length;

  sel=(notelist[xpos]&mask);

  gfx_r=use_r; gfx_g=use_g; gfx_b=use_b;

  !(xpos&3) ? ( gfx_g=gfx_r; gfx_r=gfx_b; gfx_b=use_g;);

  last_beat_pos == xpos ? ( gfx_r=gfx_g=gfx_b=sel?0.8:0.4; ) :
      !sel ? (gfx_r*=0.55; gfx_g*=0.55; gfx_b*=0.55; );


  gfx_x=lx; gfx_y=ly; gfx_rectto(tx,ty);

  lx=tx+2;
  xpos+=1;
);

ly=ty+2;
notepos+=1;
);
