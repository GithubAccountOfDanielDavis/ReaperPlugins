desc:Microrhythm MIDI Sequencer
//tags: MIDI generator sequencing microrhythm


// UI Elements
slider1:60<0,127,1>Note Start

// Enable MIDI-only optimizations
in_pin:none
out_pin:none


@init
// Shorthand constants
/* enum */ NOTE.On = $x90;
/* enum */ NOTE.Off = $x80; // Not completely sure about this one

// Runtime variables
/* var */ init.list_length = 32; // Number of steps in sequencer
/* var */ init.num_notes = 16; // Number of channels in sequencer
/* var */ init.last_beat_pos = -1;
/* var */ init.mstate = -1;
/* var */ init.note_on_state = 0;
// Not sure if we need these variables. TODO: What is the preview feature?
/* var */ init.lastpreviewsel = -1;
/* var */ init.want_preview = 1;
/* var */ init.want_preview_off = 0;

// System variables
/* system */ gfx_clear = -1;
/* system */ ext_noinit = 1;


// I'm pretty sure these are reassigned every time a slider changes
@slider
/* var */ slider.base_note = slider1 | 0;
/* var */ slider.note_list = init.list_length;


// For storing state between sessions
// Not sure how it works yet
//@serialize
//file_mem(0, 0, init.list_length);


// MIDI Processing Thread (Run once per "block")
@block

/* var */ block.curr_beat_pos = /* system */ beat_position;
/* var */ block.curr_spl_pos = 0;
/* var */ block.diff_beat_pos = (
  4.0
  * /* system */ tempo
  / (
    60.0
    * /* system */ ts_denom
    * /* system */ srate
  )
);

/* for */ loop((
    (/* system */ play_state & 1)
      ? /* system */ samplesblock
      : 1
  ),

  /* var */ block.beat_pos = (/* system */ play_state & 1)
    ? (block.curr_beat_pos * 4.0) % init.list_length
    : -100;
  
  /* if */ (
    (block.beat_pos != init.last_beat_pos)
    || !(/* system */ play_state & 1)
  ) ? (
  
    // TODO: Why the hell is this named a? What is this, algebra?
    /* var */ block.a = (/* system */ play_state & 1)
      ? slider.note_list[block.beat_pos]
      : 0;
      
    /* var */ block.note_pos = slider.base_note;
    /* var */ block.noneed = init.note_on_state; // TODO: Why is it named this?
    init.note_on_state = 0;
    /* do */ while(
    
      /* if */ (block.noneed & 1) ? (
        midisend(block.curr_spl_pos, NOTE.Off, block.note_pos);
      );
      
      /* if */ (block.a & 1) ? (
        midisend(block.curr_spl_pos, NOTE.On, block.note_pos, 127);
        init.note_on_state += 2 ^ (block.note_pos - slider.base_note);
      );
      
      block.note_pos += 1;
      block.noneed *= 0.5;
      
      /* while */ ((block.a *= 0.5) >= 1 || block.noneed >= 1);
    );
    init.last_beat_pos = block.beat_pos;
  );
  block.curr_spl_pos += 1;
  block.curr_beat_pos += block.diff_beat_pos;
);


// This is a MIDI-only plugin. Why was a descriptor
// included for processing audio samples?
//@sample


// Graphics thread (~30fps)
@gfx 400 300

function fill_background_on_resize () (
  ((this.last_gfx_w != /* system */ gfx_w) || (this.last_gfx_h != /* system */ gfx_h)) ? (
    /* system */ gfx_r =
    /* system */ gfx_g =
    /* system */ gfx_b =
    /* system */ gfx_x =
    /* system */ gfx_y = 0;
    this.last_gfx_w = /* system */ gfx_w;
    this.last_gfx_h = /* system */ gfx_h;
    gfx_rectto(/* system */ gfx_w, /* system */ gfx_h);
  );
);
fill_background_on_resize();

y = init.num_notes - 1 - (((/* system */ mouse_y / /* system */ gfx_h) * init.num_notes) | 0);

(/* system */ mouse_cap & 2) ? (
  ((y != init.lastpreviewsel)
    && (y >= 0)
    && (y < init.num_notes)) ?
  (
    (init.lastpreviewsel >= 0) ? (
      init.want_preview_off = 1;
    );
    init.want_preview = init.lastpreviewsel = y;
  );
):(
  init.want_preview_off = 1;
  init.lastpreviewsel = -1;
);

(/* system */ mouse_cap & 1) ? (
    x = ((/* system */ mouse_x / /* system */ gfx_w) * init.list_length) | 0;
    
    ((x >= 0)
      && (x < init.list_length)
      && (y >= 0)
      && (y < init.num_notes)
    ) ? (
      (init.mstate < 0) ? (
        mask = 2 ^ y;
        nlm = (slider.note_list[x] & mask);
        init.mstate = nlm ? 0 : 1;
        ((init.mstate == 0) && nlm) ? slider.note_list[x] -= mask;
        ((init.mstate == 1) && !nlm) ? slider.note_list[x] += mask;
      ) : (
        lcnt = max(
          abs(last_x - x),
          abs(last_y - y)
        ) | 0;
        dx = (x - last_x) / lcnt;
        dy = (y - last_y) / lcnt;
        (lcnt >= 1) ? loop(lcnt,
           last_x += dx;
           last_y += dy;
           mask = 2 ^ (last_y | 0);
           nlm = (slider.note_list[last_x | 0] & mask);
           ((init.mstate == 0) && nlm) ? slider.note_list[last_x | 0] -= mask;
           ((init.mstate == 1) && !nlm) ? slider.note_list[last_x | 0] += mask;
        );
      );
      last_x = x;
      last_y = y;
    );
) : (
  init.mstate >= 0 ? sliderchange(-1);
  init.mstate =- 1;
);


ly = 0;

notepos = 0;
loop(init.num_notes,

  ty = ((notepos + 1)* /* system */ gfx_h) / init.num_notes;
  lx = 0;
  xpos = 0;
  mask = 2 ^ (init.num_notes - 1 - notepos);
  cidx = (/* system */ slider1 & 7);
  /* system */ gfx_a = 1;
  
  use_r = (cidx & 1) ? 0.6 : 0.2;
  use_g = (cidx & 2) ? 0.6 : 0.2;
  use_b = (cidx & 4) ? 0.2 : 0.6;
  (cidx == 3) ? use_r *= 2;
  (cidx == 4) ? use_g *= 2;
  
  loop(init.list_length,
    tx = ((xpos + 1) * /* system */ gfx_w) / init.list_length;
  
    sel = (slider.note_list[xpos] & mask);
  
    /* system */ gfx_r = use_r;
    /* system */ gfx_g = use_g;
    /* system */ gfx_b = use_b;
  
    !(xpos & 3) ? (
      /* system */ gfx_g = /* system */ gfx_r;
      /* system */ gfx_r = /* system */ gfx_b;
     /* system */  gfx_b = use_g;
    );
  
    (init.last_beat_pos == xpos) ? (
      /* system */ gfx_r =
      /* system */ gfx_g =
      /* system */ gfx_b = sel ? 0.8 : 0.4;
    ) : !sel ? (
      /* system */ gfx_r *= 0.55;
      /* system */ gfx_g *= 0.55;
      /* system */ gfx_b *= 0.55;
    );
  
  
    /* system */ gfx_x = lx;
    /* system */ gfx_y = ly;
    gfx_rectto(tx, ty);
  
    lx = tx + 2;
    xpos += 1;
  );
  
  ly = ty + 2;
  notepos += 1;
);
